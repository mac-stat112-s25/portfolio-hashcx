---
title: "Dates"
code-annotations: select
---

## Example 1

```{r}
library(tidyverse)
```


```{r}
penguins <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-28/penguins.csv')
head(penguins)
```

```{r}
penguins |> 
  ggplot(mapping = aes(x = body_mass_g, y = bill_length_mm, color = sex)) +
  geom_point() + 
  geom_smooth(method = "lm", se = FALSE) +
  facet_wrap(~species)
```

```{r}
# Get data on only Adelie penguins that weigh more than 4700g
penguins |> 
  filter(species == "Adelie", body_mass_g > 4700)
```

```{r}
# Get data on penguin body mass only
# Show just the first 6 rows
penguins |> 
  select(body_mass_g)
```

```{r}
# Sort the penguins from smallest to largest body mass
# Show just the first 6 rows
penguins |> 
  arrange(body_mass_g)
```

```{r}
# Calculate the average body mass across all penguins
# Note: na.rm = TRUE removes the NAs from the calculation
penguins |> 
  summarise(avg_body_mass = mean(body_mass_g, na.rm = TRUE))
```

```{r}
# Calculate the average body mass by species
penguins |> 
  group_by(species) |> 
  summarise(avg_body_mass = mean(body_mass_g, na.rm = TRUE))
```

```{r}
# Create a new column that records body mass in kilograms, not grams
# NOTE: there are 1000 g in 1 kg
# Show just the first 6 rows
penguins |> 
  mutate(body_mass_kg = body_mass_g/100, .after = body_mass_g)
```

```{r}
ggplot(penguins, aes(x = species)) + 
  geom_bar()
```

```{r}
penguins |> 
  group_by(species) |> 
  summarise(n = n())
```

```{r}
# shortcut
penguins |> 
  count(species)
```

## Example 2
```{r}
# Sort Gentoo penguins from biggest to smallest with respect to their 
# bill length in cm (there are 10 mm in a cm)
penguins |> 
  mutate(bill_length_cm = bill_length_mm/10, .after = bill_length_mm) |> 
  arrange(bill_length_mm)
```

```{r}
# Sort the species from smallest to biggest with respect to their 
# average bill length in cm
penguins |> 
  group_by(species) |> 
  summarise(avg_bill_len_cm = mean(bill_length_mm/10, na.rm = TRUE)) |> 
  arrange(avg_bill_len_cm)
```

## Example 3
```{r}
penguins |> 
  filter(species == "Chinstrap") |> 
  group_by(sex) |> 
  summarize(min = min(body_mass_g), max = max(body_mass_g)) |> 
  mutate(range = max - min)
```

## Ex 1

```{r}
# Create a dataset with just Adelie and Chinstrap using %in%
# Pipe this into `count(species)` to confirm that you only have these 2 species
penguins |>
  filter(species %in% c("Adelie", "Chinstrap")) |>
  count(species)
```

```{r}
penguins |>
  filter(species != "Gentoo") |>
  count(species)
```


```{r}
penguins |> 
  summarise(`no obs` = n())
```


```{r}
penguins |> 
  filter(is.na(body_mass_g)) |> 
  summarise(`no obs with missing body mass` = n())
```


```{r}
penguins |> 
  filter(if_any(everything(), is.na)) |> 
  summarise(`no obs w/ missing val` = n())
```

```{r}
penguins |>
  na.omit() |>
  summarise(`no obs w/o missing val` = n())
```

## Ex 2

```{r}
names(penguins)
```

```{r}
# Use a shortcut to keep everything but the year and island variables
penguins |> 
  select(-year, -island)
```

```{r}
# Use a shortcut to keep only species and the penguin characteristics measured in mm
penguins |> 
  select(species, ends_with("mm"))
```

```{r}
# Use a shortcut to keep only species and bill-related measurements
penguins |> 
  select(species, starts_with("bill"))
```

```{r}
# Use a shortcut to keep only species and the length-related characteristics
penguins |> 
  select(species, contains("length"))
```

## Ex 3
```{r}
penguins |> 
  arrange(species, island)
```

```{r}
penguins |> 
  group_by(species, sex) |> 
  count()
```

```{r}
penguins |> 
  group_by(species, sex) |> 
  summarise(mean = mean(body_mass_g, na.rm = TRUE))
```


## Ex 4

```{r}
as.Date(today())
```

```{r}
today()
```

```{r}
today() |> 
  class()
```

```{r}
today() |> 
  as.Date() |> 
  class()
```

```{r}
today() |> 
  year()
```

```{r}
today() |> 
  month()
```

```{r}
today() |> 
  month(label = TRUE)
```

```{r}
today() |> 
  week()
```

```{r}
today() |> 
  mday()
```

```{r}
today() |> 
  yday()
```

```{r}
today() |> 
  wday()
```

```{r}
today() |> 
  wday(label = TRUE)
```

## Ex 5
```{r}
library(mosaic)
```

```{r}
data("Birthdays")
```

```{r}
glimpse(Birthdays)
```

```{r}
Birthdays |> 
  group_by(state) |> 
  count() |> 
  arrange(desc(n))
```

```{r}
Birthdays |> 
  summarise(`total births` = sum(births))
```

```{r}
Birthdays |> 
  group_by(state) |> 
  summarise(`total births` = sum(births)) |> 
  arrange(`total births`)
```

## Ex 6

```{r}
Birthdays |> 
  group_by(date) |> 
  summarise(`total births` = sum(births)) |> 
  ggplot() +
  geom_line(aes(x = date, y = `total births`, color = wday(date, label = TRUE)))
```

## Ex 7

### a

```{r}
Birthdays |> 
  mutate(month = month(date, label = TRUE)) |> 
  group_by(year, month) |> 
  summarise(total_births = sum(births)) |> 
  ggplot() +
  geom_boxplot(aes(x = month, y = total_births))
```

### b

```{r}
Birthdays |> 
  filter(year == 1988) |> 
  mutate(wk = week(date)) |>
  filter(wk != 53) |> 
  group_by(state, wk) |> 
  summarise(births = sum(births)) |> 
  ggplot() +
  geom_line(aes(x = wk, y = births, color = state))
```

```{r}
Birthdays |> 
  filter(year == 1988, state %in% c("MN", "LA")) |> 
  mutate(wk = week(date)) |> 
  filter(wk != 53) |> 
  group_by(state, wk) |> 
  summarise(births = sum(births)) |> 
  ggplot() +
  geom_line(aes(x = wk, y = births, color = state))
```

## Ex 8

### a

```{r}
Birthdays |> 
  filter(year == 1979, state == "MA") |> 
  arrange(desc(births))
```

### b

```{r}
Birthdays |> 
  filter(date >= ymd("1979-09-09"), date <= ymd("1979-09-12")) |> 
  group_by(state) |> 
  summarise(births = sum(births)) |> 
  arrange(desc(births)) |> 
  head(5)
```

