---
title: "Mulivariate Viz"
---

```{r}
library(tidyverse)

# Import data
weather <- read.csv("https://mac-stat.github.io/data/weather_3_locations.csv") |> 
  mutate(date = as.Date(date))  

# Check out the first 6 rows
head(weather, 6)

# What are the units of observation?


# How many data points do we have? 
nrow(weather)

# What type of variables do we have?
class(weather)
```
## Exa 1

```{r}
ggplot(data = weather, aes(x = temp3pm)) +
  geom_density()
```

## Exa 1

```{r}
# Plot 1 (no facets & starting from a density plot of temp3pm)
ggplot(weather, aes(x = temp3pm, fill = location)) + 
  geom_density(alpha = 0.5)
```

```{r}
# Plot 2 (no facets or densities)
ggplot(weather, aes(x = temp3pm, color = location)) + 
  geom_boxplot()
```

```{r}
# Plot 3 (facets)
ggplot(weather, aes(x = temp3pm)) + 
  geom_density() +
  facet_wrap(~location)
```

## Exa 3

```{r}
# Don't worry about the syntax (we'll learn it soon)
woll <- weather |>
  filter(location == "Wollongong") |> 
  mutate(date = as.Date(date))  
```

```{r}
# How often does it raintoday?
# Fill your geometric layer with the color blue.
ggplot(woll, aes(x = raintoday)) + 
  geom_bar()
```

```{r}
# If it does raintoday, what does this tell us about raintomorrow?
# Use your intuition first
ggplot(woll, aes(x = raintoday, fill = raintomorrow)) + 
  geom_bar()
```

```{r}
# Now compare different approaches

# Default: stacked bars
ggplot(woll, aes(x = raintoday, fill = raintomorrow)) + 
  geom_bar()
```

```{r}
# Side-by-side bars
ggplot(woll, aes(x = raintoday, fill = raintomorrow)) + 
  geom_bar(position = "dodge")
```

```{r}
# Proportional bars
# position = "fill" refers to filling the frame, nothing to do with the color-related fill
ggplot(woll, aes(x = raintoday, fill = raintomorrow)) + 
  geom_bar(position = "fill")
```

## Exa 4

```{r}
ggplot(data = woll, mapping = aes(y = temp3pm, x = date)) +
  geom_point() +
  geom_smooth(span = .1)
```

```{r}
# Instead of a curve that captures the general TREND,
# draw a line that illustrates the movement of RAW temperatures from day to day
# NOTE: We haven't learned this geom yet! Guess.
ggplot(woll, aes(y = temp3pm, x = date)) +
  geom_line()
```
## Exa 5

```{r}
# Plot temp3pm vs temp9am
# Change the code in order to indicate the location to which each data point corresponds
ggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) + 
  geom_point()
```



```{r}
# Change the code in order to indicate the location to which each data point corresponds
# AND identify the days on which it rained / didn't raintoday
ggplot(weather, aes(y = temp3pm, x = temp9am, colour = location, shape = raintoday)) + 
  geom_point()
```

## Exa 6

```{r}
# Change the code in order to construct a line plot of temp3pm vs date for each separate location (no points!)
ggplot(weather, aes(y = temp3pm, x = date, colour = location)) + 
  geom_line()
```
## Exa 7

```{r}
ggplot(weather, aes(x = raintoday, fill = raintomorrow)) +
  geom_bar(position = "fill") + 
  facet_wrap(~location)
```

## Exercises

```{r}
# Import and check out data
education <- read.csv("https://mac-stat.github.io/data/sat.csv")
head(education)
```

### Ex 1: SAT Scores

```{r}
ggplot(education, aes(x = sat)) +
  geom_density()
```

### Ex 2

```{r}
# Construct a plot of sat vs expend
# Include a "best fit linear regression model" (HINT: method = "lm")
ggplot(education, aes(x = expend, y = sat)) +
  geom_point() +
  geom_smooth(method = "lm")
```

```{r}
# Construct a plot of sat vs expend
# Include a "best fit linear regression model" (HINT: method = "lm")
ggplot(education, aes(y = sat, x = salary)) +
  geom_point() +
  geom_smooth(method = "lm")
```

### Ex 3

```{r}
# Construct a plot of sat vs expend
# Include a "best fit linear regression model" (HINT: method = "lm")
ggplot(education, aes(y = sat, x = salary, size = expend)) +
  geom_point() +
  geom_smooth(method = "lm")
```


### Ex 4

```{r}
ggplot(education, aes(y = sat, salary, colour = cut(expend, 2))) +
  geom_point() +
  geom_smooth(method = "lm")
```

```{r}
ggplot(education, aes(y = sat, salary, colour = cut(expend, 3))) +
  geom_point() +
  geom_smooth(method = "lm")
```


```{r}
ggplot(education, aes(y = sat, salary, colour = cut(expend, 2))) +
  geom_point() +
  geom_smooth(method = "lm") +
  facet_wrap(~cut(expend, 2))
```

## Ex 5

```{r}
ggplot(education, aes(x = fracCat)) +
  geom_bar()
```

```{r}
ggplot(education, aes(x = sat, color = fracCat)) + 
  geom_density()
```

```{r}
ggplot(education, aes(x = expend, y = sat, color = fracCat)) +
  geom_point() +
  geom_smooth(method = "lm")
```

## Exercises 

### Ex 6

```{r}
# Remove the "State" column and use it to label the rows
# Then scale the variables
plot_data <- education |> 
  column_to_rownames("State") |> 
  data.matrix() |> 
  scale()
```

```{r}
# Load the gplots package needed for heatmaps
library(gplots)
```

```{r}
# Construct heatmap 1
heatmap.2(plot_data,
  dendrogram = "none",
  Rowv = NA, 
  scale = "column",
  keysize = 0.7, 
  density.info = "none",
  col = hcl.colors(256), 
  margins = c(10, 20),
  colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05),
  sepcolor = "white", trace = "none"
)
```


```{r}
# Construct heatmap 2
heatmap.2(plot_data,
  dendrogram = "none",
  Rowv = TRUE,             ### WE CHANGED THIS FROM NA TO TRUE
  scale = "column",
  keysize = 0.7, 
  density.info = "none",
  col = hcl.colors(256), 
  margins = c(10, 20),
  colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05),
  sepcolor = "white", trace = "none"
)
```

```{r}
# Construct heatmap 3
heatmap.2(plot_data,
  dendrogram = "row",       ### WE CHANGED THIS FROM "none" TO "row"
  Rowv = TRUE,            
  scale = "column",
  keysize = 0.7, 
  density.info = "none",
  col = hcl.colors(256), 
  margins = c(10, 20),
  colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05),
  sepcolor = "white", trace = "none"
)
```

### Ex 7
```{r}
stars(plot_data,
  flip.labels = FALSE,
  key.loc = c(10, 1.5),
  cex = 1, 
  draw.segments = TRUE
)
```

```{r}
stars(plot_data,
  flip.labels = FALSE,
  locations = data.matrix(as.data.frame(state.center)),  # added external data to arrange by geo location
  key.loc = c(-110, 28),
  cex = 1, 
  draw.segments = TRUE
)
```

