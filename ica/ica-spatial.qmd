---
title: "Spatial Viz"
---

## Review

```{r}
# Load tidyverse package for plotting and wrangling
library(tidyverse)

# Import the data and only keep 2 addresses
energy <- read.csv("https://mac-stat.github.io/data/MacNaturalGas.csv") |> 
  mutate(date = as.Date(paste0(month, "/1/", year), "%m/%d/%Y")) |> 
  filter(address != "c")

# Check it out
head(energy)
```

```{r}
ggplot(energy, aes(x = therms, color = address)) +
  geom_density()
```

```{r}
ggplot(energy, aes(x = date,  y = therms, color = address)) +
  geom_smooth(method = "lm", se = FALSE)
```

```{r}
ggplot(energy, aes(x = therms, color = address)) +
  geom_density() +
  facet_wrap(~renovated)
```

```{r}
ggplot(energy, aes(y = therms, x = hdd, color = renovated)) +
  geom_smooth(method = "lm", se = FALSE) +
  facet_wrap(~address)
```

## Ex 1


## Ex 3

```{r}
library(tidyverse)
library(leaflet)
library(rnaturalearth)  # geographical boundaries
library(mosaic)         # map themes
library(sf)             # convert to sf boundaries
library(maps)           # state- and county-level boundaries
library(RColorBrewer)   # refine color pallet
library(socviz)         # collection of datasets and functions used in Kealy's
                        # 2019 book Data Visualization: A Practical Introduction
```


```{r}
fave_places <- read.csv("https://ajohns24.github.io/data/112/our_fave_places.csv")
fave_places
```

```{r}
leaflet(data = fave_places) |> 
  addTiles() |>  
  addMarkers(lng = ~longitude, lat = ~latitude)
```

## Ex2

```{r}
library(gplots)
```

```{r}
leaflet(data = fave_places) |> 
  addTiles() |> 
  addCircles(color = "orange")
```

```{r}
leaflet(data = fave_places) |> 
  addProviderTiles("OPNVKarte") |> 
  clearBounds() |>
  addCircles(color = "orange", weight = 10, opacity = .5)
```

In console:

- `providers` --> list of providers
- `?addControl` --> what controls (layers) can be added

## From Help File

```{r}
# !formatR
library(leaflet)
m <- leaflet() %>% addTiles()
m  # a map with the default OSM tile layer


# set bounds
m %>% fitBounds(0, 40, 10, 50)

# move the center to Snedecor Hall
m <- m %>% setView(-93.65, 42.0285, zoom = 17)
m

# popup
m %>% addPopups(-93.65, 42.0285, "Here is the <b>Department of Statistics</b>, ISU")
rand_lng <- function(n = 10) rnorm(n, -93.65, .01)
rand_lat <- function(n = 10) rnorm(n, 42.0285, .01)

# use automatic bounds derived from lng/lat data
m <- m %>% clearBounds()
m

# popup
m %>% addPopups(rand_lng(), rand_lat(), "Random popups")

# marker
m %>% addMarkers(rand_lng(), rand_lat())
m %>% addMarkers(
  rand_lng(), rand_lat(), popup = paste("A random letter", sample(LETTERS, 10))
)

Rlogo <- file.path(R.home("doc"), "html", "logo.jpg")
m %>% addMarkers(
  174.7690922, -36.8523071, icon = list(
    iconUrl = Rlogo, iconSize = c(100, 76)
  ), popup = "R was born here!"
)

m %>% addMarkers(rnorm(30, 175), rnorm(30, -37), icon = list(
  iconUrl = Rlogo, iconSize = c(25, 19)
))

# circle (units in metres)
m %>% addCircles(rand_lng(50), rand_lat(50), radius = runif(50, 50, 150))

# circle marker (units in pixels)
m %>% addCircleMarkers(rand_lng(50), rand_lat(50), color = "#ff0000")
m %>% addCircleMarkers(rand_lng(100), rand_lat(100), radius = runif(100, 5, 15))

# rectangle
m %>% addRectangles(
  rand_lng(), rand_lat(), rand_lng(), rand_lat(),
  color = "red", fill = FALSE, dashArray = "5,5", weight = 3
)

# polyline
m %>% addPolylines(rand_lng(50), rand_lat(50))

# polygon
m %>% addPolygons(rand_lng(), rand_lat(), layerId = "foo")

# geoJSON
seattle_geojson <- list(
  type = "Feature",
  geometry = list(
    type = "MultiPolygon",
    coordinates = list(list(list(
      c(-122.36075812146,  47.6759920119894),
      c(-122.360781646764, 47.6668890126755),
      c(-122.360782108665,  47.6614990696722),
      c(-122.366199035722, 47.6614990696722),
      c(-122.366199035722,  47.6592874248973),
      c(-122.364582509469, 47.6576254522105),
      c(-122.363887331445,  47.6569107302038),
      c(-122.360865528129, 47.6538418253251),
      c(-122.360866157644,  47.6535254473167),
      c(-122.360866581103, 47.6533126275176),
      c(-122.362526540691,  47.6541872926348),
      c(-122.364442114483, 47.6551892850798),
      c(-122.366077719797,  47.6560733960606),
      c(-122.368818463838, 47.6579742346694),
      c(-122.370115159943,  47.6588730808334),
      c(-122.372295967029, 47.6604350102328),
      c(-122.37381369088,  47.660582362063),
      c(-122.375522972109, 47.6606413027949),
      c(-122.376079703095,  47.6608793094619),
      c(-122.376206315662, 47.6609242364243),
      c(-122.377610811371,  47.6606160735197),
      c(-122.379857378879, 47.6610306942278),
      c(-122.382454873022,  47.6627496239169),
      c(-122.385357955057, 47.6638573778241),
      c(-122.386007328104,  47.6640865692306),
      c(-122.387186331506, 47.6654326177161),
      c(-122.387802656231,  47.6661492860294),
      c(-122.388108244121, 47.6664548739202),
      c(-122.389177800763,  47.6663784774359),
      c(-122.390582858689, 47.6665072251861),
      c(-122.390793942299,  47.6659699214511),
      c(-122.391507906234, 47.6659200946229),
      c(-122.392883050767,  47.6664166747017),
      c(-122.392847210144, 47.6678696739431),
      c(-122.392904778401,  47.6709016021624),
      c(-122.39296705153, 47.6732047491624),
      c(-122.393000803496,  47.6759322346303),
      c(-122.37666945305, 47.6759896300663),
      c(-122.376486363943,  47.6759891899754),
      c(-122.366078869215, 47.6759641734893),
      c(-122.36075812146,  47.6759920119894)
    )))
  ),
  properties = list(
    name = "Ballard",
    population = 48000,
    # You can inline styles if you want
    style = list(
      fillColor = "yellow",
      weight = 2,
      color = "#000000"
    )
  ),
  id = "ballard"
)
m %>% setView(-122.36075812146, 47.6759920119894, zoom = 13) %>% addGeoJSON(seattle_geojson)


# use the Dark Matter layer from CartoDB
leaflet() %>% addTiles("https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png",
  attribution = paste(
    "&copy; <a href=\"https://openstreetmap.org\">OpenStreetMap</a> contributors",
    "&copy; <a href=\"https://cartodb.com/attributions\">CartoDB</a>"
  )
) %>% setView(-122.36, 47.67, zoom = 10)

# provide a data frame to leaflet()
categories <- LETTERS[1:10]
df <- data.frame(
  lat = rand_lat(100), lng = rand_lng(100), size = runif(100, 5, 20),
  category = factor(sample(categories, 100, replace = TRUE), levels = categories),
  value = rnorm(100)
)
m <- leaflet(df) %>% addTiles()
m %>% addCircleMarkers(~lng, ~lat, radius = ~size)
m %>% addCircleMarkers(~lng, ~lat, radius = runif(100, 4, 10), color = c("red"))

# Discrete colors using the "RdYlBu" colorbrewer palette, mapped to categories
RdYlBu <- colorFactor("RdYlBu", domain = categories)
m %>% addCircleMarkers(~lng, ~lat, radius = ~size,
  color = ~RdYlBu(category), fillOpacity = 0.5)

# Continuous colors using the "Greens" colorbrewer palette, mapped to value
greens <- colorNumeric("Greens", domain = NULL)
m %>% addCircleMarkers(~lng, ~lat, radius = ~size,
  color = ~greens(value), fillOpacity = 0.5)
```

```{r}
# Import starbucks location data
starbucks <- read.csv("https://mac-stat.github.io/data/starbucks.csv")
starbucks
```

```{r}
starbucks_us <- starbucks |> 
  filter(Country == "US")
```


```{r}
# Don't worry about the syntax
starbucks_mn <- starbucks |>   
  filter(Country == "US", State.Province == "MN")
starbucks_mn
```

```{r}
sb_icon = "https://cdn.freebiesupply.com/logos/large/2x/starbucks-logo-png-transparent.png"

leaflet(data = starbucks_mn, options = leafletOptions(minZoom = 6, maxZoom = 12)) |> 
  addTiles() |> 
  setView(lng = median(starbucks_mn$Longitude), lat = median(starbucks_mn$Latitude), zoom = 6) |> 
  addMarkers(
    # show popup on hover
    label = starbucks_mn$Store.Name,
    
    # customize markers
    icon = list(
      iconUrl = sb_icon,
      iconSize = c(20,20)
    )
  )

```


## Ex 3
```{r}
ggplot(data = starbucks, mapping = aes(x = Longitude, y = Latitude)) +
  geom_point()
```

## Ex 4

```{r}
world_boundaries <- ne_countries(returnclass = "sf")
```

```{r}
ggplot(data = world_boundaries) +
  geom_sf()
```

```{r}
ggplot() +
  geom_sf(data = world_boundaries) +
  geom_point(
    data = starbucks, 
    mapping = aes(x = Longitude, y = Latitude),
    color = "#548427",
    alpha = .2,
    size = .2
  ) +
  theme_map()
```

## Ex 5
```{r}
starbucks_cma <- starbucks |> 
  filter(Country %in% c('CA', 'MX', 'US'))
```

```{r}
cma_boundaries <- ne_states(
  country = c("Canada", "Mexico", "United States of America"),
  returnclass = "sf"
)
```

```{r}
ggplot() +
  geom_sf(data = cma_boundaries) +
  geom_point(
    data = starbucks_cma, 
    mapping = aes(x = Longitude, y = Latitude),
    color = "darkgreen",
    sizes = .2,
    alpah = .3) +
  theme_map() +
  coord_sf(xlim = c(-170, -10), expand = TRUE)
```

## Ex 6

```{r}
startbucks_midwest <- starbucks |> 
  filter(State.Province %in% c("MN", "ND", "SD", "WI"))
```

```{r}
midwest_boundaries <- st_as_sf(
  maps::map("county",
            regions = c("minnesota", "wisconsin", "north dakota", "south dakota"),
            fill = TRUE,
            plot = FALSE
  )
)
```
```{r}
ggplot() +
  geom_sf(data = midwest_boundaries) +
  geom_point(data = startbucks_midwest, mapping = aes(x = Longitude, y = Latitude)) +
  theme_map()
```


## Ex 7

```{r}
ggplot() +
  geom_sf(data = midwest_boundaries) +
  geom_density_2d(
    data = startbucks_midwest, 
    mapping = aes(x = Longitude, y = Latitude)
  ) +
  theme_map()
```

## Part 3: Choropleth Maps

```{r}
elections_by_state <-  read.csv("https://mac-stat.github.io/data/election_2020_by_state.csv")
elections_by_counties <- read.csv("https://mac-stat.github.io/data/election_2020_county.csv")
```


```{r}
# Don't worry about the code!

elections_by_state <- elections_by_state |> 
  filter(state_abbr != "DC") |> 
  select(state_name, state_abbr, repub_pct_20) |> 
  mutate(repub_20_categories = 
           cut(repub_pct_20, 
               breaks = seq(30, 70, by = 5), 
               labels = c("30-34", "35-39", "40-44", "45-49",
                          "50-54", "55-59", "60-64", "65-70"), 
               include.lowest = TRUE))

elections_by_counties <- elections_by_counties |> 
  select(state_name, state_abbr, county_name, county_fips,
          repub_pct_20, median_age, median_rent) |> 
  mutate(repub_20_categories = 
           cut(repub_pct_20, 
               breaks = seq(0, 100, by = 10),
               labels = c("0-9", "10-19", "20-29", "30-39", "40-49",
                          "50-59", "60-69", "70-79", "80-89", "90-100"),
               include.lowest = TRUE))
```

## Ex 8

```{r}
# Get the latitude and longitude coordinates of state boundaries
states_map <- map_data("state")

# Check it out
head(states_map)
```

```{r}
states_map |> 
  group_by(region) |> 
  summarise(n = n()) |> 
  arrange(n)
```

### Continous colors: Default

```{r}
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_pct_20)) +
  geom_map(map = states_map) +
  expand_limits(x = states_map$long, y = states_map$lat) +
  theme_map()
```

### Continous colors: Custom

```{r}
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_pct_20)) +
  geom_map(map = states_map) +
  expand_limits(x = states_map$long, y = states_map$lat) +
  theme_map() +
  scale_fill_gradientn(name = "% Republican", 
                      colors = c("blue", "purple", "red"),
                      values = scales::rescale(seq(0, 100, by = 5)))
```

### Discretized Colors: Default

```{r}
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +
  geom_map(map = states_map) +
  expand_limits(x = states_map$long, y = states_map$lat) +
  theme_map()
```

### Discretized Colors: Custom

```{r}
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +
  geom_map(map = states_map) +
  expand_limits(x = states_map$long, y = states_map$lat) +
  theme_map() +
  scale_fill_manual(values = rev(brewer.pal(8, "RdBu")), name = "% Republican")
```
### Messing Around

```{r}
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +
  geom_map(map = states_map) +
  expand_limits(x = states_map$long, y = states_map$lat) +
  theme_map() +
  scale_fill_manual(values = rev(brewer.pal(8, "RdBu")), name = "% Republican") +
  geom_point(data = starbucks_us, 
             aes(x = Longitude, y = Latitude), 
             inherit.aes = FALSE,
             size = .05,
             alpha = .2)
```

### 

```{r}
data(county_map)
county_map
```

```{r}
elections_by_counties
```

```{r}
elections_by_counties <- 
  elections_by_counties |> 
  mutate(county_fips = as.character(county_fips)) |> 
  mutate(county_fips = ifelse(nchar(county_fips) == 4, paste0("0", county_fips), county_fips))
elections_by_counties
```

```{r}
ggplot(elections_by_counties, aes(map_id = county_fips, fill = repub_20_categories)) +
  geom_map(map = county_map) +
  expand_limits(x = county_map$long, y = county_map$lat) +
  theme_map() +
  theme(legend.position = "right") +
  scale_fill_manual(values = rev(brewer.pal(10, "RdBu")), name = "% Republican") +
  coord_equal() +
  labs(title = "% Republican 2020")
```

```{r}
ggplot(elections_by_counties, aes(map_id = county_fips, fill = median_rent)) +
  geom_map(map = county_map) +
  expand_limits(x = county_map$long, y = county_map$lat) +
  theme_map() +
  theme(legend.position = "right") +
  # scale_fill_manual(values = rev(brewer.pal(10, "RdBu")), name = "") +
  coord_equal() +
  labs(title = "Median Rent 2020")
```


## Resouces
- Tom Jenkins' [An Introduction to R Leaflet](https://tomjenkins.netlify.app/tutorials/r-leaflet-introduction/)
